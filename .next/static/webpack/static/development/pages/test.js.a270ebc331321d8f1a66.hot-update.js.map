{"version":3,"file":"static/webpack/static/development/pages/test.js.a270ebc331321d8f1a66.hot-update.js","sources":["webpack:///./pages/test.js"],"sourcesContent":["import React, { Component } from 'react';\n\nimport Web3 from '../ethereum/web3';\nimport _ from 'lodash';\n\nvar web3 = {};\nvar alreadyLoaded = false;\nvar compiler;\nvar optimize = 1;\nvar outterResult = \"\"\n\n// function loadWeb3() {\n//    let web3Injected = window.web3;\n//    if(typeof web3Injected !== 'undefined'){\n//      console.log(\"saw injected web3!\");\n//      web3 = new Web3(web3Injected.currentProvider);\n//    } else {\n//      console.log(\"did not see web3 injected!\");\n//      web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n//      //console.debug(web3.eth.accounts);\n//    }\n// }\n\nclass Deploy extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      users: {},\n      thisUser: {},\n      thisImage: {},\n      newFlag: 0,\n      thisNetId: '',\n      contractText: '',\n      statusMessage: 'loading BrowserSolc compiler...',\n      thisTxHash: '',\n      thisAddress: '',\n      compiler: {}\n    };\n    this.RegisterChange = this.RegisterChange.bind(this);\n  }\n\n  getInfo(){\n    var outerThis = this;\n    if(typeof web3.eth !== 'undefined'){\n      console.log(\"saw eth accounts: \");\n      console.debug(web3.eth.accounts);\n      //console.debug(web3.eth)\n      // web3.eth.getCompilers(function(err,resp){\n      //   console.log(\"available compilers: \" + resp);\n      // });\n      web3.version.getNetwork((err, netId) => {\n        var tempNetId = ''\n        if(err) {\n          tempNetId = err;\n          console.log('web3.version.getNetwork() saw err: ' + err);\n        }\n        console.log(\"saw netId:\" + netId);\n        switch (netId) {\n          case \"1\":\n            tempNetId = \"mainnet\";\n            console.log('This is mainnet');\n            break\n          case \"2\":\n            tempNetId = \"Morden  test network\";\n            console.log('This is the deprecated Morden test network.');\n            break\n          case \"3\":\n            tempNetId = \"ropsten test network\";\n            console.log('This is the ropsten test network.');\n            break\n          default:\n            tempNetId = \"localhost\";\n            console.log('This is an unknown/localhost network: ' + tempNetId);\n        }\n        outerThis.setState({\n          thisNetId: tempNetId\n        });\n      });\n    }\n  }\n\n  setupCompiler(){\n    var outerThis = this;\n    setTimeout(function(){\n      // console.debug(window.BrowserSolc);\n      window.BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n        var compilerVersion = soljsonReleases[_.keys(soljsonReleases)[0]];\n        console.log(\"Browser-solc compiler version : \" + compilerVersion);\n        window.BrowserSolc.loadVersion(compilerVersion, function(c) {\n          compiler = c;\n          outerThis.setState({statusMessage:\"ready!\"},function(){\n            console.log(\"Solc Version Loaded: \" + compilerVersion);\n          });\n        });\n      });\n    },1000);\n  }\n\n  compileAndDeploy() {\n    var outerThis = this;\n    console.log(\"compileAndDeploy called!\");\n    this.setState({\n      statusMessage: \"compiling and deploying!\"\n    });\n\n    var result = compiler.compile(this.state.contractText, optimize);\n    if(result.errors && JSON.stringify(result.errors).match(/error/i)){\n      outerThis.setState({\n        statusMessage: JSON.stringify(result.errors)\n      });\n    } else {\n      console.debug(result);\n      // we need to find which of the contracts contains the bytecode for deployment\n      // thisContractSorted = _.sortBy _.map(result.contracts, function(val,key) {\n      //   // ugly mapsort in react\n      //     return [val['abi'],key];\n      //   }\n      // ), (val) ->\n      //   return -1*parseFloat(val[0])  # this grabs the hidden timestampms from above, to sort by\n      var thisMap = _.sortBy(_.map(result.contracts, function(val,key) {\n        // ugly mapsort in react\n          return [key,val];\n        }), function(val) {\n          return -1*parseFloat(val[1].bytecode);\n        });\n\n      console.debug(thisMap);\n\n      var abi = JSON.parse(thisMap[0][1].interface);\n      var bytecode = \"0x\" + thisMap[0][1].bytecode;\n\n      var myContract = web3.eth.contract(abi);\n      console.log(\"bytecode: \" + JSON.stringify(bytecode));\n      console.log(\"abi: \" + JSON.stringify(abi));\n      console.log(\"myContract: \");\n      console.debug(myContract);\n      //console.log(\"myAddress: \" + web3.eth.accounts[0]);\n      web3.eth.getGasPrice((err,gasPrice) => {\n        if(err){\n          console.log(\"deployment web3.eth.getGasPrice error: \" + err);\n          outerThis.setState({\n            statusMessage: \"deployment web3.eth.getGasPrice error: \" + err\n          });\n          return null;\n        } else {\n          console.log(\"current gasPrice (gas / ether): \" + gasPrice);\n          web3.eth.estimateGas({data: bytecode},function(err,gasEstimate){\n            if(err) {\n              console.log(\"deployment web3.eth.estimateGas error: \" + err);\n              outerThis.setState({\n                statusMessage: \"deployment web3.eth.estimateGas error: \" + err\n              });\n              return null;\n            } else {\n              console.log(\"deployment web3.eth.estimateGas amount: \" + gasEstimate);\n              var inflatedGasCost = Math.round(1.2*gasEstimate);\n              var ethCost = gasPrice * inflatedGasCost / 10000000000 / 100000000;\n              var warnings = \"\"\n              if(result.errors){\n                warnings = JSON.stringify(result.errors) + \", \" // show warnings if they exist\n              }\n              outerThis.setState({\n                statusMessage: warnings + \"Compiled! (inflated) estimateGas amount: \" + inflatedGasCost + \" (\" + ethCost+ \" Ether)\"\n              });\n              myContract.new({from:web3.eth.accounts[0],data:bytecode,gas:inflatedGasCost},function(err, newContract){\n                console.log(\"newContract: \" + newContract);\n                if(err) {\n                  console.log(\"deployment err: \" + err);\n                  outerThis.setState({\n                    statusMessage: \"deployment error: \" + err\n                  });\n                  return null;\n                } else {\n                  // NOTE: The callback will fire twice!\n                  // Once the contract has the transactionHash property set and once its deployed on an address.\n                  // e.g. check tx hash on the first call (transaction send)\n                  if(!newContract.address) {\n                    console.log(\"Contract transaction send: TransactionHash: \" + newContract.transactionHash + \" waiting to be mined...\");\n                    outerThis.setState({\n                      statusMessage: \"Please wait a minute.\",\n                      thisTxHash: newContract.transactionHash,\n                      thisAddress: \"waiting to be mined...\"\n                    });\n                  } else {\n                    console.log(\"Contract mined! Address: \" + newContract.address);\n                    console.log(JSON.stringify(newContract));\n                    var thisNewStatus = \"Contract Deployed to \" + outerThis.state.thisNetId;\n                    outerThis.setState({\n                      statusMessage: thisNewStatus,\n                      thisAddress: newContract.address\n                    });\n                    return null;\n                  }\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n    return null;\n  }\n\n  txHashLink(thisTxHash){\n    var thisLink = \"https://etherscan.io/tx/\" + thisTxHash;\n    return <a href={ thisLink } target='_blank'>{ thisTxHash }</a>;\n  }\n\n  ethAddressLink(thisAddress){\n    var thisLink = \"https://etherscan.io/address/\" + thisAddress;\n    return <a href={ thisLink } target=\"_blank\">{ thisAddress }</a>;\n  }\n\n  RegisterChange(e) {\n    //console.log('registering change : ' + e.target.name + \" - \" + e.target.value);\n    // this.setState({\n    //   [e.target.name]: e.target.value,\n    //   \"statusMessage\": \"ready!\"\n    // }\n    var newState = this.state;\n    newState[e.target.name] = e.target.value;\n    newState[\"statusMessage\"] = \"ready!\";\n    this.setState(newState);\n  }\n\n  defaultEthAddressLink() {\n    if(typeof web3.eth !== 'undefined'){\n      if(typeof web3.eth.accounts !== 'undefined') {\n        if(typeof web3.eth.accounts[0] !== 'undefined'){\n          var thisLink = \"https://etherscan.io/address/\" + web3.eth.accounts[0];\n          return <span><a href={ thisLink }target=\"_blank\">{ web3.eth.accounts[0] }</a></span>\n        } else {\n          return <span> web3.eth.accounts[0] was undefined!</span>\n        }\n      } else {\n        return <span> web3.eth.accounts was undefined!</span>\n      }\n    } else {\n      return <span> web3.eth was undefined!</span>\n    }\n  }\n\n  componentDidMount() {\n    if(!alreadyLoaded){ // we only want this to happen once upon page load, not every component reload...\n      alreadyLoaded = true;\n     // loadWeb3();\n      this.getInfo();\n      this.setupCompiler();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <table style={{\"minWidth\":\"70%\",\"textAlign\":\"center\",\"margin\":\"auto\"}}>\n            <tbody>\n              <tr>\n              <td style={{\"width\":\"170px\"}}>\n                <a href=\"http://www.enledger.io/\" target=\"_blank\"><img src=\"http://www.enledger.com/EnLedger_glowy_logo_200x200.png\" alt=\"EnLedger-Logo\" width=\"160px\"/></a><br />\n                <a href=\"http://www.enledger.io/\" target=\"_blank\">EnLedger.io</a>\n              </td>\n              <td style={{\"verticalAlign\":\"middle\",\"textAlign\":\"center\",\"fontSize\":\"12px\",\"fontWeight\":\"bold\"}}>\n                &\n              </td>\n              <td style={{\"width\":\"450px\"}}>\n                <a href=\"https://blockgeeks.com/\" target=\"_blank\"><img src=\"Blockgeeks-blue-black-white.png\" alt=\"Blockgeeks-Logo\" height=\"100px\"/></a>\n              </td>\n              <td style={{\"width\":\"20px\",\"verticalAlign\":\"middle\",\"textAlign\":\"center\",\"fontSize\":\"12px\",\"fontWeight\":\"bold\"}}>\n                present\n              </td><td>\n                <h2><span style={{\"color\":\"#84DDFF\"}}><a href=\"https://www.github.com/Tectract\" style={{\"color\":\"#84DDFF\"}} target=\"_blank\">Tectract&#39;s</a></span></h2>\n                <h1><b><a href=\"https://www.github.com/Tectract/EthDeployer\" style={{\"color\":\"#FFFFFF\"}} target=\"_blank\">EthDeployer</a></b></h1>\n              </td></tr>\n            </tbody>\n          </table>\n        </div><br />\n        <div className=\"App-intro\">\n          <div>Saw connection to network: <b>{ this.state.thisNetId }</b>!</div><br />\n          <div>Saw default Eth account to use: <b>{ this.defaultEthAddressLink() }</b>!</div><br />\n\n          <textarea\n                 rows='18' cols='120'\n                 className=\"contractText\"\n                 name='contractText'\n                 ref='contractTextRef'\n                 style={{\"backgroundColor\":\"#E9FEED\",\"whiteSpace\":\"nowrap\",\"resize\":\"none\",\"overflowX\":\"hidden\"}}\n                 value={this.state.contractText}\n                 onChange={this.RegisterChange} />\n          <br /><br />{ this.state.statusMessage }<br /><br />\n          <button color=\"white\" className=\"Button\" onClick={ () => { this.compileAndDeploy() } }>Compile & Deploy</button>\n          <br /><br />\n\n\n          <div>new contract TXID: { this.txHashLink(this.state.thisTxHash) }</div>\n          <div>new contract address: { this.ethAddressLink(this.state.thisAddress) }</div>\n\n          <br />\n          <br />\n          <hr />\n          <span className=\"app-outro\">\n            <table style={{\"minWidth\":\"70%\",\"textAlign\":\"left\",\"margin\":\"auto\"}}>\n              <tbody>\n                <tr><td style={{\"textAlign\":\"center\"}}>\n                  <span style={{\"fontSize\":\"15px\",\"fontWeight\":\"bold\"}}>\n                    Thank you for visiting <a href=\"http://www.enledger.io/\" target=\"_blank\">EnLedger.io</a> and <a href=\"https://www.github.com/Tectract/EthDeployer\" target=\"_blank\">Tectract&#39;s EthDeployer!</a><br /><br />\n                  </span>\n                </td></tr>\n                <tr><td>\n                  <span style={{\"fontSize\":\"13px\",\"fontWeight\":\"bold\"}}>\n                    To use this tool you&#39;ll need a connection to an Ethereum network, via:<br />\n                    <span style={{\"padding\":\"0px 0px 0px 6px\"}}>\n                      1. start <a href=\"https://github.com/ethereum/go-ethereum\" target=\"_blank\">Ethereum server</a> or <a href=\"https://github.com/ethereumjs/testrpc\" target=\"_blank\">testrpc server</a> running at localhost:8545, then reload this page\n                    </span><br /><span style={{\"padding\":\"0px 0px 0px 6px\"}}>\n                      2. Install <a href=\"https://metamask.io/\" target=\"_blank\">Metamask plugin</a>, connect to network of your choice (including Mainnet!), then reload this page\n                    </span><br />\n                    <u>notes</u>: for localhost testrpc (testnet), you don&#39;t need Metamask running, see <a href=\"https://github.com/Tectract/EthDeployer/blob/master/README.md\" target=\"_blank\">the README</a> for metamask signing locally & ethereumjs-testrpc notes<br />\n                    <u>notes</u>: for compilation to succeed while running against localhost:8545 you&#39;ll need solc (solidity compiler) installed locally, see instructions <a href=\"https://solidity.readthedocs.io/en/v0.3.3/installing-solidity.html\" target=\"_blank\">here</a><br />\n                    <u>notes</u>: sometimes you may need to reload once or twice for it to see your web3.eth.accounts[0] account\n                    <br /><br />\n                    Author: <a href=\"http://www.enledger.io/blog/our-team/\" target=\"_blank\">Ryan Molecke</a>, sponsored by <a href=\"http://blockgeeks.com/\" target=\"_blank\">BlockGeeks.com</a>!<br />\n                    Issues, comments, suggestions? Please use <a href=\"https://github.com/Tectract/EthDeployer/issues\" target=\"_blank\">this page</a> to start an issue ticket, do not email Ryan for help directly :)<br />\n                    If you clone this tool and set up your own EthDeployer, please include the <a href=\"https://github.com/Tectract/EthDeployer/blob/master/LICENSE\" target=\"_blank\">Mozilla Public License 2.0</a> & give me props, thanks! ~Ryan\n\n                  </span>\n                </td></tr>\n              </tbody>\n            </table>\n          </span>\n          <br /><br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Deploy;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAdA;AAeA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAfA;AACA;AAgBA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAvTA;AACA;AAyTA;;;;A","sourceRoot":""}