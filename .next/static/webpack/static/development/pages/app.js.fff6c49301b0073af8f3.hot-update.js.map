{"version":3,"file":"static/webpack/static/development/pages/app.js.fff6c49301b0073af8f3.hot-update.js","sources":["webpack:///./pages/components/landingPage.js"],"sourcesContent":["import React from 'react';\nimport { Container, Form, TextArea, Grid } from 'semantic-ui-react';\nimport Head from 'next/head';\nimport Header from './Header';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\n\n\nclass landingPage extends React.Component{\n\n\tstate = {\n\t\tcurrentCompiler:'',\n\t\tcontractCode:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimates:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\tloading:false\n\t}\n\n\t//get Time of Audit\n\tsetTimeOfAudit=()=>{\n\n\t\tlet today = new Date();\n\t\tlet date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\t\tlet time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\t\tlet dateTime = date+' '+time;\n\n\t\tthis.setState({\n\t\t\ttimeOfAudit: dateTime\n\t\t})\n\t}\n\n\t//receive compiler version from child component-landingPageSection1 and store it to state\n\tselectCompiler =(compiler)=>{\n\t\tthis.setState({\n\t\t\tcurrentCompiler:compiler\n\t\t})\n\t}\n\n\t//receive contract code from child component-landingPageSection2 and store it to state\n\tstoreContractCodeToState=(contractCode)=>{\n\t\tthis.setState({\n\t\t\tcontractCode: contractCode\n\t\t})\n\t}\n\n\tremoveErrorMessage=()=>{\n\t\tthis.setState({\n\t\t\terrorMessage: '',\n\t\t\tsuccessMessage:'',\n\t\t\tpercent:'0'\n\t\t})\n\t}\n\n\t//Compile contract and run audit\n\tonSubmit =()=>{\n\t\tif(this.state.currentCompiler){\n\t\tthis.setTimeOfAudit();\n\t\tlet self = this;\n\n\t\tthis.setState({\n\t\t  \t\tloading: true,\n\t\t  \t\terrorMessage:'',\n\t\t  \t\tsuccessMessage:''\n\t\t  \t})\n\n\t\tvar x = this.state.contractCode.split(\"\\n\");\n\t\tvar source = this.state.contractCode;\n\t\t//source = 'contract x { function g() {} }';\n\n\t\t//printlist of available compilers\n\t\t// BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n\t\t//   //console.log(soljsonSources);\n\t\t//   //console.log(soljsonReleases);\n\t\t// });\n\n\t\t//Load a specific compiler version\n\t\tBrowserSolc.loadVersion.bind(this)(this.state.currentCompiler, function(compiler){\n\t\t\n\t\t  let optimize = 1;\n\t\t  let result = compiler.compile(source, optimize);\n\t\t  if(result.errors){\n\n\t\t  \tself.setState({\n\t\t  \t\terrorMessage: result.errors[0]\n\t\t  \t})\n\t\t  }else{\n\t\t  \tself.setState({\n\t\t  \t\tnoOfLines:x.length,\n\t\t  \t\tcreationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n\t\t  \t\texecutionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n\t\t  \t\tgasEstimates : this.state.executionCost+ this.state.creationCost,\n\t\t  \t\tpercent: 100,\n\t\t  \t\tsuccessMessage:\"Audit Complete!\"\n\t\t  \t})\n\n\t\t  }\n\t\t  console.log(result.contracts[\":Migrations\"].gasEstimates.creation);\n\t\t});\n\n\t}else{\n\t\tthis.setState({\n\t\t\terrorMessage:\"Please select a compiler\"\n\t\t})\n\n\t}\n\n\t\tthis.setState({\n\t\t  \t\tloading: false\n\t\t  \t})  \n\t}\n\n\n\trender(){\n\n\t\treturn(\n\t\t\t<Container style={{width:'1230px'}}>\n\t\t\t  <Header/>\n\t\t\t\t<Grid>\n\t\t\t\t    <Grid.Row>\n\n\t\t\t\t\t      <Grid.Column width={12}>\n\t\t\t\t\t      <LandingPageSection1\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      successMessage = {this.state.successMessage}\n\t\t\t\t\t      errorMessage = {this.state.errorMessage}\n\t\t\t\t\t      percent = {this.state.percent}\n\t\t\t\t\t      storeContractCodeToState = {this.storeContractCodeToState}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\n\t\t\t\t\t      <Grid.Column width={4}>\n\t\t\t\t\t      <LandingPageSection2 \n\t\t\t\t\t      gasEstimates = {this.state.gasEstimates}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      noOfLines = {this.state.noOfLines}\n\t\t\t\t\t      timeOfAudit = {this.state.timeOfAudit}\n\t\t\t\t\t      vunerabiltiesFound = {this.state.vunerabiltiesFound}\n\t\t\t\t\t      onSubmit ={this.onSubmit}\n\t\t\t\t\t      selectCompiler = {this.selectCompiler}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t    </Grid.Row>\n\t\t\t    </Grid>\n\t\t  </Container>\n\t\t  )\n\n\t}\n}\n\nexport default landingPage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;;;AAtJA;AACA;AAwJA;;;;A","sourceRoot":""}