{"version":3,"file":"static/webpack/static/development/pages/app.js.8d240d2c84e7400f5877.hot-update.js","sources":["webpack:///./pages/components/landingPage.js"],"sourcesContent":["import React from 'react';\nimport { Container, Form, TextArea,Input, Grid,List,Button,Modal } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport Head from 'next/head';\nimport Header from './Header';\nimport renderedModal from './renderedModal';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\nimport sampleContract from '../../sampleContract';\n\n\nclass landingPage extends React.Component{\n\n\tstate = {\n\t\tcurrentCompiler:'',\n\t\tcontractCode:sampleContract(),\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\tloading:false,\n\t\tsuggestions:[],\n\t\tuserName:'',\n\t\tuserContactInfo:'',\n\t\tuserSuggestion:'',\n\t\tmodalOpen:false\n\t}\n\n\t//get Time of Audit\n\tsetTimeOfAudit=()=>{\n\n\t\tlet today = new Date();\n\t\tlet date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\t\tlet time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\t\tlet dateTime = date+' '+time;\n\n\t\tthis.setState({\n\t\t\ttimeOfAudit: dateTime\n\t\t})\n\t}\n\n\t//receive compiler version from child component-landingPageSection1 and store it to state\n\tselectCompiler =(compiler)=>{\n\t\tthis.setState({\n\t\t\tcurrentCompiler:compiler\n\t\t})\n\t}\n\n\t//receive contract code from child component-landingPageSection2 and store it to state\n\tstoreContractCodeToState=(contractCode)=>{\n\t\tconsole.log(contractCode);\n\t\tthis.setState({\n\t\t\tcontractCode: contractCode\n\t\t})\n\t}\n//reset all neccesary variable when screen is clicked, drop down is selected and other similar events\n\tremoveErrorMessage=()=>{\n\t\tthis.setState({\n\t\twarningsList:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\t})\n\t}\n\n\n\trenderWarningList=(warnings)=>{\n\n\t\t //update loading bar\n      \tthis.setState({\n\t\t  \t\tpercent: '75',\n\t\t  \t\twarningsList:warnings.length\n\t\t  \t})\n\n\tlet list = warnings.map(warnings => {        \n            return (\n                <List.Item>\n                          <List.Content>\n                            <List.Header as='a'>line {warnings.key}</List.Header>\n                            <List.Description as='a'>{warnings.value}</List.Description>\n                          </List.Content>\n                    </List.Item>\n            );   \n        });\n\n\t     //update loading bar\n        this.setState({\n\t\t  \t\tpercent: '100',\n\t\t  \t\trenderedList:list\n\t\t  \t})\n\n\t}\n\n\n\tauditCode=(dataArray)=>{\n        return Auditor(dataArray);\n\n    }\n\n\t//Compile contract and run audit\n\tonSubmit =()=>{\n\t\t//check if compiler is selected by user else notify user\n\t\tif(this.state.currentCompiler){\n\t\tthis.setTimeOfAudit();\n\t\tlet self = this;\n\n\n\t\t//notify user of progress\n\t\tthis.setState({\n\t\t  \t\tloading: true,\n\t\t  \t\terrorMessage:'',\n\t\t  \t\tsuccessMessage:''\n\t\t  \t})\n\n\t\t//store contract code to state and prepare for compile and audit\n\t\tlet source = this.state.contractCode;\n\t\t//split code into array based on each new line\n        let dataArray = source.split(\"\\n\");\n        let dataArrayLength = dataArray.length;\n\n        //update loading bar\n        self.setState({\n\t\t  \t\tpercent: '25'\n\t\t  \t})\n\t\t\n\t\t//printlist of available compilers\n\t\t// BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n\t\t//   //console.log(soljsonSources);\n\t\t//   //console.log(soljsonReleases);\n\t\t// });\n\n\t\t//Load a chosen compiler version\n\t\tBrowserSolc.loadVersion.bind(this)(this.state.currentCompiler, function(compiler){\n\t\t\n\t\t  let optimize = 1;\n\t\t  let result = compiler.compile(source, optimize);\n\t\t  // console.log(result);\n\t\t  // console.log(result.sources[\"\"]);\n\t\t  //console.log(result.contracts);\n\n\n\n\n\n\n\t\t  //check for errrors in compilation\n\t\t  if(result.errors && !result.sources[\"\"]){\n\n\t\t  \t\t\t  //save all warning and errors to state\n\t\t  self.setState({\n\t\t  \t\terrorMessage: result.errors[0]\n\t\t  \t})\n\n\n\n\t\t  }else{\n\t\t  \t//check for warnings in compilation\n\t\t  if(result.errors){\n\n\t\t  \t\t\t  //save all warning and errors to state\n\t\t  self.setState({\n\t\t  \t\terrorMessage: result.errors[0]\n\t\t  \t})\n\t\t   }\n\n\n\n\t\t  \t//compilation was succesful, auditing and updating general stats begins at this point \n\n\t\t  \t//compute total gas cost which is the estimated creation cost plus the execution cost\n\t\t  //let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n\t\t  \tself.setState({\n\t\t  \t\tnoOfLines:dataArrayLength,\n\t\t  \t\t// creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n\t\t  \t\t// executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n\t\t  \t\t// gasEstimate : totalGasCost,\n\t\t  \t\tpercent: 50,\n\t\t  \t\tsuccessMessage:\"Audit Complete!\"\n\t\t  \t})\n\t\t  \t//send contract code to auditor and await feed back of array of warnings\n\t\t  \tlet warnings = self.auditCode(dataArray);\n\n\t\t  \t//send array of warnings to renderList function to create organized JSX and update state\n\t\t  \tself.renderWarningList(warnings);\n\n\t\t  }\n\t\n\t\t});\n\n\t}else{\n\t\tthis.setState({\n\t\t\terrorMessage:\"Please select a compiler\"\n\t\t})\n\n\t}\n\n\t\tthis.setState({\n\t\t  \t\tloading: false\n\t\t  \t})  \n\t}\n\n\tsaveUserSuggestionToState=()=>{\n\t\tlet userSuggestion ={}\n\t\tuserSuggestion.name = this.state.userName;\n\t\tuserSuggestion.contactInfo = this.state.userContactInfo;\n\t\tuserSuggestion.suggestion= this.state.userSuggestion;\n\t\tlet currentSuggestions = this.state.suggestions;\n\t\tcurrentSuggestions.push(userSuggestion);\n\n\t\tthis.setState({\n\t\t\tsuggestions:currentSuggestions,\n\t\t\tmodalOpen:false\n\t\t})\n\nconsole.log(this.state.suggestions);\n\t}\n\n\tuserNameToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserName:event.target.value\n\t\t})\n\t}\n\n\tuserContactInfoToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserContactInfo:event.target.value\n\t\t})\n\t}\n\n\tuserSuggestionToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserSuggestion:event.target.value\n\t\t})\n\t}\n\n\thandleOpen = () => this.setState({ modalOpen: true })\n\n    handleClose = () => this.setState({ modalOpen: false })\n\n\n\trender(){\n\n\t\treturn(\n\t\t\t<div >\n\n\t\t\t<Container style={{width:'1300px', marginTop:'10px'}}>\n\t\t\t  <Header/>\n\t\t\t\t<Grid>\n\t\t\t\t    <Grid.Row>\n\n\t\t\t\t\t      <Grid.Column width={11}>\n\t\t\t\t\t      <LandingPageSection1\n\t\t\t\t\t      contractCode={this.state.contractCode}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      successMessage = {this.state.successMessage}\n\t\t\t\t\t      errorMessage = {this.state.errorMessage}\n\t\t\t\t\t      percent = {this.state.percent}\n\t\t\t\t\t      storeContractCodeToState = {this.storeContractCodeToState}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\n\t\t\t\t\t      <Grid.Column width={4}>\n\t\t\t\t\t      <LandingPageSection2 \n\t\t\t\t\t      warningsList = {this.state.warningsList}\n\t\t\t\t\t      renderedList = {this.state.renderedList}\n\t\t\t\t\t      gasEstimate = {this.state.gasEstimate}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      noOfLines = {this.state.noOfLines}\n\t\t\t\t\t      timeOfAudit = {this.state.timeOfAudit}\n\t\t\t\t\t      onSubmit ={this.onSubmit}\n\t\t\t\t\t      selectCompiler = {this.selectCompiler}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t\t      <Grid.Column width={1}>\n\t\t\t\t\t              <Modal open={this.state.modalOpen} onClose={this.handleClose} trigger={<Button onClick={this.handleOpen} style={{marginTop:'775px'}} basic circular icon='comment alternate outline' size='huge'>Suggestion Box</Button>}>\n\t\t\t\t\t\t\t\t    <Modal.Header style={{fontSize:'15px',color:'grey'}}>\n\t\t\t\t\t\t\t\t    Thank you for taking the time to leave some feedback, I am a solo enthusiast who created this auditor for fun and to contribute to our beautiful ecosystem,\n\t\t\t\t\t\t\t\t    I appreciate all suggestions, contributions and feedback to help improve this platform.\n\t\t\t\t\t\t\t\t    </Modal.Header>\n\t\t\t\t\t\t\t\t    <Modal.Content image>\n\t\t\t\t\t\t\t\t      <Modal.Description>\n\t\t\t\t\t\t\t\t        <Form>\n\t\t\t\t\t\t\t\t        <Input onChange={this.userNameToState} value={this.state.userName} label='Name(optional)' placeholder='John Doe.....' />\n\t\t\t\t\t\t\t\t        <Input onChange={this.userContactInfoToState} value={this.state.userContactInfo} label='Contact Information' placeholder='Email, Telegram,Git..etc' />\n\t\t\t\t\t\t\t\t        <br/>\n\t\t\t\t\t\t\t\t        <br/>\n\t\t\t\t\t\t\t\t        <TextArea onChange={this.userSuggestionToState} value={this.state.userSuggestion} style ={{width:'850px',height:'100px'}} placeholder=\"Please enter your message here...\"/>\n\t\t\t\t\t\t\t\t      \t<br/>\n\t\t\t\t\t\t\t\t      \t<br/>\n\t\t\t\t\t\t\t\t      \t<Button floated='right' secondary onClick={this.saveUserSuggestionToState}>Submit</Button>\n\t\t\t\t\t\t\t\t        </Form>\n\t\t\t\t\t\t\t\t        <h4 style={{color:'gray'}}>ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647</h4>\n\t\t\t\t\t\t\t\t      </Modal.Description>\n\t\t\t\t\t\t\t\t    </Modal.Content>\n\t\t\t\t\t\t\t\t  </Modal>\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t    </Grid.Row>\n\t\t\t    </Grid>\n\n\t\t  </Container>\n\t\t<h4 style={{marginLeft:'380px',color:'gray'}}>Suggestions and Contributions are welcome ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647</h4>\n\t\t  </div>\n\t\t  )\n\n\t}\n}\n\nexport default landingPage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AAsBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AADA;AAMA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAasourceRoot":""}