{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/chris/Documents/BlockchainProjects/hackathon/auditorFrontEnd/pages/components/landingPage.js\";\nimport React from 'react';\nimport { Container, Form, TextArea, Grid } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport Head from 'next/head';\nimport Header from './Header';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\n\nvar landingPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(landingPage, _React$Component);\n\n  function landingPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, landingPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(landingPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentCompiler: '',\n      contractCode: '',\n      creationCost: '',\n      executionCost: '',\n      gasEstimate: '',\n      timeOfAudit: '',\n      fileSize: '',\n      vunerabiltiesFound: '',\n      noOfLines: '',\n      percent: '',\n      errorMessage: '',\n      successMessage: '',\n      renderedList: \"\",\n      loading: false //get Time of Audit\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTimeOfAudit\", function () {\n      var today = new Date();\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      var dateTime = date + ' ' + time;\n\n      _this.setState({\n        timeOfAudit: dateTime\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectCompiler\", function (compiler) {\n      _this.setState({\n        currentCompiler: compiler\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"storeContractCodeToState\", function (contractCode) {\n      _this.setState({\n        contractCode: contractCode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeErrorMessage\", function () {\n      _this.setState({\n        errorMessage: '',\n        successMessage: '',\n        percent: '0'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderWarningList\", function (warnings) {\n      //update loading bar\n      self.setState({\n        percent: '75'\n      });\n      var list = warnings.map(function (warnings) {\n        return React.createElement(List.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(List.Header, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"line \", warnings.key), React.createElement(List.Description, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, warnings.value)));\n      }); //update loading bar\n\n      self.setState({\n        percent: '100',\n        renderedList: list\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"auditCode\", function () {\n      var contractCode = _this.props.contractCode;\n      return warnings = Auditor(contractCode);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function () {\n      //check if compiler is selected by user else notify user\n      if (_this.state.currentCompiler) {\n        _this.setTimeOfAudit();\n\n        var _self = _assertThisInitialized(_this); //notify user of progress\n\n\n        _this.setState({\n          loading: true,\n          errorMessage: '',\n          successMessage: ''\n        }); //store contract code to state and prepare for compile and audit\n\n\n        var source = _this.state.contractCode; //split code into array based on each new line\n\n        var dataArray = source.split(\"\\n\"); //update loading bar\n\n        _self.setState({\n          percent: '25'\n        }); //printlist of available compilers\n        // BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n        //   //console.log(soljsonSources);\n        //   //console.log(soljsonReleases);\n        // });\n        //Load a chosen compiler version\n\n\n        BrowserSolc.loadVersion.bind(_assertThisInitialized(_this))(_this.state.currentCompiler, function (compiler) {\n          var optimize = 1;\n          var result = compiler.compile(source, optimize); //compute total gas cost which is the estimated creation cost plus the execution cost\n\n          var totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0] + result.contracts[\":Migrations\"].gasEstimates.creation[1]; //check for errrors in compilation\n\n          if (result.errors) {\n            _self.setState({\n              errorMessage: result.errors[0]\n            });\n          } else {\n            //compilation was succesful, auditing and updating general stats begins at this point \n            _self.setState({\n              noOfLines: dataArray.length,\n              creationCost: result.contracts[\":Migrations\"].gasEstimates.creation[0],\n              executionCost: result.contracts[\":Migrations\"].gasEstimates.creation[1],\n              gasEstimate: totalGasCost,\n              percent: 50,\n              successMessage: \"Audit Complete!\"\n            }); //send contract code to auditor and await feed back of array of warnings\n\n\n            var _warnings = this.auditCode(dataArray); //send array of warnings to renderList function to create organized JSX and update state\n\n\n            renderWarningList(_warnings);\n          }\n        });\n      } else {\n        _this.setState({\n          errorMessage: \"Please select a compiler\"\n        });\n      }\n\n      _this.setState({\n        loading: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(landingPage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        style: {\n          width: '1230px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(LandingPageSection1, {\n        removeErrorMessage: this.removeErrorMessage,\n        loading: this.state.loading,\n        successMessage: this.state.successMessage,\n        errorMessage: this.state.errorMessage,\n        percent: this.state.percent,\n        storeContractCodeToState: this.storeContractCodeToState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(LandingPageSection2, {\n        renderedList: this.state.renderedList,\n        gasEstimate: this.state.gasEstimate,\n        removeErrorMessage: this.removeErrorMessage,\n        loading: this.state.loading,\n        noOfLines: this.state.noOfLines,\n        timeOfAudit: this.state.timeOfAudit,\n        vunerabiltiesFound: this.state.vunerabiltiesFound,\n        onSubmit: this.onSubmit,\n        selectCompiler: this.selectCompiler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return landingPage;\n}(React.Component);\n\nexport default landingPage;","map":{"version":3,"sources":["/Users/chris/Documents/BlockchainProjects/hackathon/auditorFrontEnd/pages/components/landingPage.js"],"names":["React","Container","Form","TextArea","Grid","Auditor","Head","Header","LandingPageSection1","LandingPageSection2","landingPage","currentCompiler","contractCode","creationCost","executionCost","gasEstimate","timeOfAudit","fileSize","vunerabiltiesFound","noOfLines","percent","errorMessage","successMessage","renderedList","loading","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","setState","compiler","warnings","self","list","map","key","value","props","state","setTimeOfAudit","source","dataArray","split","BrowserSolc","loadVersion","bind","optimize","result","compile","totalGasCost","contracts","gasEstimates","creation","errors","length","auditCode","renderWarningList","width","removeErrorMessage","storeContractCodeToState","onSubmit","selectCompiler","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Form, TextArea, Grid } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport Head from 'next/head';\nimport Header from './Header';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\n\n\nclass landingPage extends React.Component{\n\n\tstate = {\n\t\tcurrentCompiler:'',\n\t\tcontractCode:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\tloading:false\n\t}\n\n\t//get Time of Audit\n\tsetTimeOfAudit=()=>{\n\n\t\tlet today = new Date();\n\t\tlet date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\t\tlet time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\t\tlet dateTime = date+' '+time;\n\n\t\tthis.setState({\n\t\t\ttimeOfAudit: dateTime\n\t\t})\n\t}\n\n\t//receive compiler version from child component-landingPageSection1 and store it to state\n\tselectCompiler =(compiler)=>{\n\t\tthis.setState({\n\t\t\tcurrentCompiler:compiler\n\t\t})\n\t}\n\n\t//receive contract code from child component-landingPageSection2 and store it to state\n\tstoreContractCodeToState=(contractCode)=>{\n\t\tthis.setState({\n\t\t\tcontractCode: contractCode\n\t\t})\n\t}\n\n\tremoveErrorMessage=()=>{\n\t\tthis.setState({\n\t\t\terrorMessage: '',\n\t\t\tsuccessMessage:'',\n\t\t\tpercent:'0'\n\t\t})\n\t}\n\n\n\trenderWarningList=(warnings)=>{\n\n\t\t //update loading bar\n      \tself.setState({\n\t\t  \t\tpercent: '75'\n\t\t  \t})\n\n\tlet list = warnings.map(warnings => {        \n            return (\n                <List.Item>\n                          <List.Content>\n                            <List.Header as='a'>line {warnings.key}</List.Header>\n                            <List.Description as='a'>{warnings.value}</List.Description>\n                          </List.Content>\n                    </List.Item>\n            );   \n        });\n\n\t     //update loading bar\n        self.setState({\n\t\t  \t\tpercent: '100',\n\t\t  \t\trenderedList:list\n\t\t  \t})\n\n\t}\n\n\n\tauditCode=()=>{\n\n\t\tlet contractCode = this.props.contractCode;\n        return warnings = Auditor(contractCode);\n\n    }\n\n\t//Compile contract and run audit\n\tonSubmit =()=>{\n\t\t//check if compiler is selected by user else notify user\n\t\tif(this.state.currentCompiler){\n\t\tthis.setTimeOfAudit();\n\t\tlet self = this;\n\n\n\t\t//notify user of progress\n\t\tthis.setState({\n\t\t  \t\tloading: true,\n\t\t  \t\terrorMessage:'',\n\t\t  \t\tsuccessMessage:''\n\t\t  \t})\n\n\t\t//store contract code to state and prepare for compile and audit\n\t\tlet source = this.state.contractCode;\n\t\t//split code into array based on each new line\n        let dataArray = source.split(\"\\n\");\n\n        //update loading bar\n        self.setState({\n\t\t  \t\tpercent: '25'\n\t\t  \t})\n\t\t\n\t\t//printlist of available compilers\n\t\t// BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n\t\t//   //console.log(soljsonSources);\n\t\t//   //console.log(soljsonReleases);\n\t\t// });\n\n\t\t//Load a chosen compiler version\n\t\tBrowserSolc.loadVersion.bind(this)(this.state.currentCompiler, function(compiler){\n\t\t\n\t\t  let optimize = 1;\n\t\t  let result = compiler.compile(source, optimize);\n\n\t\t  //compute total gas cost which is the estimated creation cost plus the execution cost\n\t\t  let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\t\t  //check for errrors in compilation\n\t\t  if(result.errors){\n\n\t\t  \tself.setState({\n\t\t  \t\terrorMessage: result.errors[0]\n\t\t  \t})\n\t\t  }else{\n\t\t  \t//compilation was succesful, auditing and updating general stats begins at this point \n\t\t  \tself.setState({\n\t\t  \t\tnoOfLines:dataArray.length,\n\t\t  \t\tcreationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n\t\t  \t\texecutionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n\t\t  \t\tgasEstimate : totalGasCost,\n\t\t  \t\tpercent: 50,\n\t\t  \t\tsuccessMessage:\"Audit Complete!\"\n\t\t  \t})\n\t\t  \t//send contract code to auditor and await feed back of array of warnings\n\t\t  \tlet warnings = this.auditCode(dataArray);\n\n\t\t  \t//send array of warnings to renderList function to create organized JSX and update state\n\t\t  \trenderWarningList(warnings);\n\n\t\t  }\n\t\n\t\t});\n\n\t}else{\n\t\tthis.setState({\n\t\t\terrorMessage:\"Please select a compiler\"\n\t\t})\n\n\t}\n\n\t\tthis.setState({\n\t\t  \t\tloading: false\n\t\t  \t})  \n\t}\n\n\n\trender(){\n\n\t\treturn(\n\t\t\t<Container style={{width:'1230px'}}>\n\t\t\t  <Header/>\n\t\t\t\t<Grid>\n\t\t\t\t    <Grid.Row>\n\n\t\t\t\t\t      <Grid.Column width={12}>\n\t\t\t\t\t      <LandingPageSection1\n\t\t\t\t\t      \n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      successMessage = {this.state.successMessage}\n\t\t\t\t\t      errorMessage = {this.state.errorMessage}\n\t\t\t\t\t      percent = {this.state.percent}\n\t\t\t\t\t      storeContractCodeToState = {this.storeContractCodeToState}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\n\t\t\t\t\t      <Grid.Column width={4}>\n\t\t\t\t\t      <LandingPageSection2 \n\t\t\t\t\t      renderedList = {this.state.renderedList}\n\t\t\t\t\t      gasEstimate = {this.state.gasEstimate}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      noOfLines = {this.state.noOfLines}\n\t\t\t\t\t      timeOfAudit = {this.state.timeOfAudit}\n\t\t\t\t\t      vunerabiltiesFound = {this.state.vunerabiltiesFound}\n\t\t\t\t\t      onSubmit ={this.onSubmit}\n\t\t\t\t\t      selectCompiler = {this.selectCompiler}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t    </Grid.Row>\n\t\t\t    </Grid>\n\t\t  </Container>\n\t\t  )\n\n\t}\n}\n\nexport default landingPage;"]},"metadata":{},"sourceType":"module"}