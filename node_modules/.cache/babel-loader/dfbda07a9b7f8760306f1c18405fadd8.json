{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chris/Documents/BlockchainProjects/hackathon/auditorFrontEnd/pages/test.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport _ from 'lodash';\nvar web3 = {};\nvar alreadyLoaded = false;\nvar compiler;\nvar optimize = 1;\nvar outterResult = \"\";\n\nfunction loadWeb3() {\n  var web3Injected = window.web3;\n\n  if (typeof web3Injected !== 'undefined') {\n    console.log(\"saw injected web3!\");\n    web3 = new Web3(web3Injected.currentProvider);\n  } else {\n    console.log(\"did not see web3 injected!\");\n    web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\")); //console.debug(web3.eth.accounts);\n  }\n}\n\nvar Deploy =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Deploy, _Component);\n\n  function Deploy(props, context) {\n    var _this;\n\n    _classCallCheck(this, Deploy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Deploy).call(this, props, context));\n    _this.state = {\n      users: {},\n      thisUser: {},\n      thisImage: {},\n      newFlag: 0,\n      thisNetId: '',\n      contractText: '',\n      statusMessage: 'loading BrowserSolc compiler...',\n      thisTxHash: '',\n      thisAddress: '',\n      compiler: {}\n    };\n    _this.RegisterChange = _this.RegisterChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Deploy, [{\n    key: \"getInfo\",\n    value: function getInfo() {\n      var outerThis = this;\n\n      if (typeof web3.eth !== 'undefined') {\n        console.log(\"saw eth accounts: \");\n        console.debug(web3.eth.accounts); //console.debug(web3.eth)\n        // web3.eth.getCompilers(function(err,resp){\n        //   console.log(\"available compilers: \" + resp);\n        // });\n\n        web3.version.getNetwork(function (err, netId) {\n          var tempNetId = '';\n\n          if (err) {\n            tempNetId = err;\n            console.log('web3.version.getNetwork() saw err: ' + err);\n          }\n\n          console.log(\"saw netId:\" + netId);\n\n          switch (netId) {\n            case \"1\":\n              tempNetId = \"mainnet\";\n              console.log('This is mainnet');\n              break;\n\n            case \"2\":\n              tempNetId = \"Morden  test network\";\n              console.log('This is the deprecated Morden test network.');\n              break;\n\n            case \"3\":\n              tempNetId = \"ropsten test network\";\n              console.log('This is the ropsten test network.');\n              break;\n\n            default:\n              tempNetId = \"localhost\";\n              console.log('This is an unknown/localhost network: ' + tempNetId);\n          }\n\n          outerThis.setState({\n            thisNetId: tempNetId\n          });\n        });\n      }\n    }\n  }, {\n    key: \"setupCompiler\",\n    value: function setupCompiler() {\n      var outerThis = this;\n      setTimeout(function () {\n        // console.debug(window.BrowserSolc);\n        window.BrowserSolc.getVersions(function (soljsonSources, soljsonReleases) {\n          var compilerVersion = soljsonReleases[_.keys(soljsonReleases)[0]];\n\n          console.log(\"Browser-solc compiler version : \" + compilerVersion);\n          window.BrowserSolc.loadVersion(compilerVersion, function (c) {\n            compiler = c;\n            outerThis.setState({\n              statusMessage: \"ready!\"\n            }, function () {\n              console.log(\"Solc Version Loaded: \" + compilerVersion);\n            });\n          });\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"compileAndDeploy\",\n    value: function compileAndDeploy() {\n      var outerThis = this;\n      console.log(\"compileAndDeploy called!\");\n      this.setState({\n        statusMessage: \"compiling and deploying!\"\n      });\n      var result = compiler.compile(this.state.contractText, optimize);\n\n      if (result.errors && _JSON$stringify(result.errors).match(/error/i)) {\n        outerThis.setState({\n          statusMessage: _JSON$stringify(result.errors)\n        });\n      } else {\n        console.debug(result); // we need to find which of the contracts contains the bytecode for deployment\n        // thisContractSorted = _.sortBy _.map(result.contracts, function(val,key) {\n        //   // ugly mapsort in react\n        //     return [val['abi'],key];\n        //   }\n        // ), (val) ->\n        //   return -1*parseFloat(val[0])  # this grabs the hidden timestampms from above, to sort by\n\n        var thisMap = _.sortBy(_.map(result.contracts, function (val, key) {\n          // ugly mapsort in react\n          return [key, val];\n        }), function (val) {\n          return -1 * _parseFloat(val[1].bytecode);\n        });\n\n        console.debug(thisMap);\n        var abi = JSON.parse(thisMap[0][1].interface);\n        var bytecode = \"0x\" + thisMap[0][1].bytecode;\n        var myContract = web3.eth.contract(abi);\n        console.log(\"bytecode: \" + _JSON$stringify(bytecode));\n        console.log(\"abi: \" + _JSON$stringify(abi));\n        console.log(\"myContract: \");\n        console.debug(myContract); //console.log(\"myAddress: \" + web3.eth.accounts[0]);\n\n        web3.eth.getGasPrice(function (err, gasPrice) {\n          if (err) {\n            console.log(\"deployment web3.eth.getGasPrice error: \" + err);\n            outerThis.setState({\n              statusMessage: \"deployment web3.eth.getGasPrice error: \" + err\n            });\n            return null;\n          } else {\n            console.log(\"current gasPrice (gas / ether): \" + gasPrice);\n            web3.eth.estimateGas({\n              data: bytecode\n            }, function (err, gasEstimate) {\n              if (err) {\n                console.log(\"deployment web3.eth.estimateGas error: \" + err);\n                outerThis.setState({\n                  statusMessage: \"deployment web3.eth.estimateGas error: \" + err\n                });\n                return null;\n              } else {\n                console.log(\"deployment web3.eth.estimateGas amount: \" + gasEstimate);\n                var inflatedGasCost = Math.round(1.2 * gasEstimate);\n                var ethCost = gasPrice * inflatedGasCost / 10000000000 / 100000000;\n                var warnings = \"\";\n\n                if (result.errors) {\n                  warnings = _JSON$stringify(result.errors) + \", \"; // show warnings if they exist\n                }\n\n                outerThis.setState({\n                  statusMessage: warnings + \"Compiled! (inflated) estimateGas amount: \" + inflatedGasCost + \" (\" + ethCost + \" Ether)\"\n                });\n                myContract.new({\n                  from: web3.eth.accounts[0],\n                  data: bytecode,\n                  gas: inflatedGasCost\n                }, function (err, newContract) {\n                  console.log(\"newContract: \" + newContract);\n\n                  if (err) {\n                    console.log(\"deployment err: \" + err);\n                    outerThis.setState({\n                      statusMessage: \"deployment error: \" + err\n                    });\n                    return null;\n                  } else {\n                    // NOTE: The callback will fire twice!\n                    // Once the contract has the transactionHash property set and once its deployed on an address.\n                    // e.g. check tx hash on the first call (transaction send)\n                    if (!newContract.address) {\n                      console.log(\"Contract transaction send: TransactionHash: \" + newContract.transactionHash + \" waiting to be mined...\");\n                      outerThis.setState({\n                        statusMessage: \"Please wait a minute.\",\n                        thisTxHash: newContract.transactionHash,\n                        thisAddress: \"waiting to be mined...\"\n                      });\n                    } else {\n                      console.log(\"Contract mined! Address: \" + newContract.address);\n                      console.log(_JSON$stringify(newContract));\n                      var thisNewStatus = \"Contract Deployed to \" + outerThis.state.thisNetId;\n                      outerThis.setState({\n                        statusMessage: thisNewStatus,\n                        thisAddress: newContract.address\n                      });\n                      return null;\n                    }\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"txHashLink\",\n    value: function txHashLink(thisTxHash) {\n      var thisLink = \"https://etherscan.io/tx/\" + thisTxHash;\n      return React.createElement(\"a\", {\n        href: thisLink,\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, thisTxHash);\n    }\n  }, {\n    key: \"ethAddressLink\",\n    value: function ethAddressLink(thisAddress) {\n      var thisLink = \"https://etherscan.io/address/\" + thisAddress;\n      return React.createElement(\"a\", {\n        href: thisLink,\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, thisAddress);\n    }\n  }, {\n    key: \"RegisterChange\",\n    value: function RegisterChange(e) {\n      //console.log('registering change : ' + e.target.name + \" - \" + e.target.value);\n      // this.setState({\n      //   [e.target.name]: e.target.value,\n      //   \"statusMessage\": \"ready!\"\n      // }\n      var newState = this.state;\n      newState[e.target.name] = e.target.value;\n      newState[\"statusMessage\"] = \"ready!\";\n      this.setState(newState);\n    }\n  }, {\n    key: \"defaultEthAddressLink\",\n    value: function defaultEthAddressLink() {\n      if (typeof web3.eth !== 'undefined') {\n        if (typeof web3.eth.accounts !== 'undefined') {\n          if (typeof web3.eth.accounts[0] !== 'undefined') {\n            var thisLink = \"https://etherscan.io/address/\" + web3.eth.accounts[0];\n            return React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 232\n              },\n              __self: this\n            }, React.createElement(\"a\", {\n              href: thisLink,\n              target: \"_blank\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 232\n              },\n              __self: this\n            }, web3.eth.accounts[0]));\n          } else {\n            return React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 234\n              },\n              __self: this\n            }, \" web3.eth.accounts[0] was undefined!\");\n          }\n        } else {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237\n            },\n            __self: this\n          }, \" web3.eth.accounts was undefined!\");\n        }\n      } else {\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, \" web3.eth was undefined!\");\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!alreadyLoaded) {\n        // we only want this to happen once upon page load, not every component reload...\n        alreadyLoaded = true;\n        loadWeb3();\n        this.getInfo();\n        this.setupCompiler();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        style: {\n          \"minWidth\": \"70%\",\n          \"textAlign\": \"center\",\n          \"margin\": \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        style: {\n          \"width\": \"170px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.enledger.io/\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"http://www.enledger.com/EnLedger_glowy_logo_200x200.png\",\n        alt: \"EnLedger-Logo\",\n        width: \"160px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"http://www.enledger.io/\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"EnLedger.io\")), React.createElement(\"td\", {\n        style: {\n          \"verticalAlign\": \"middle\",\n          \"textAlign\": \"center\",\n          \"fontSize\": \"12px\",\n          \"fontWeight\": \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, \"&\"), React.createElement(\"td\", {\n        style: {\n          \"width\": \"450px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://blockgeeks.com/\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"Blockgeeks-blue-black-white.png\",\n        alt: \"Blockgeeks-Logo\",\n        height: \"100px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }))), React.createElement(\"td\", {\n        style: {\n          \"width\": \"20px\",\n          \"verticalAlign\": \"middle\",\n          \"textAlign\": \"center\",\n          \"fontSize\": \"12px\",\n          \"fontWeight\": \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"present\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          \"color\": \"#84DDFF\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://www.github.com/Tectract\",\n        style: {\n          \"color\": \"#84DDFF\"\n        },\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, \"Tectract's\"))), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://www.github.com/Tectract/EthDeployer\",\n        style: {\n          \"color\": \"#FFFFFF\"\n        },\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"EthDeployer\")))))))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-intro\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"Saw connection to network: \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, this.state.thisNetId), \"!\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, \"Saw default Eth account to use: \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, this.defaultEthAddressLink()), \"!\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }), React.createElement(\"textarea\", {\n        rows: \"18\",\n        cols: \"120\",\n        className: \"contractText\",\n        name: \"contractText\",\n        ref: \"contractTextRef\",\n        style: {\n          \"backgroundColor\": \"#E9FEED\",\n          \"whiteSpace\": \"nowrap\",\n          \"resize\": \"none\",\n          \"overflowX\": \"hidden\"\n        },\n        value: this.state.contractText,\n        onChange: this.RegisterChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }), this.state.statusMessage, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        color: \"white\",\n        className: \"Button\",\n        onClick: function onClick() {\n          _this2.compileAndDeploy();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, \"Compile & Deploy\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, \"new contract TXID: \", this.txHashLink(this.state.thisTxHash)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, \"new contract address: \", this.ethAddressLink(this.state.thisAddress)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"app-outro\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        style: {\n          \"minWidth\": \"70%\",\n          \"textAlign\": \"left\",\n          \"margin\": \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        style: {\n          \"textAlign\": \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          \"fontSize\": \"15px\",\n          \"fontWeight\": \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"Thank you for visiting \", React.createElement(\"a\", {\n        href: \"http://www.enledger.io/\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"EnLedger.io\"), \" and \", React.createElement(\"a\", {\n        href: \"https://www.github.com/Tectract/EthDeployer\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"Tectract's EthDeployer!\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      })))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          \"fontSize\": \"13px\",\n          \"fontWeight\": \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, \"To use this tool you'll need a connection to an Ethereum network, via:\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        style: {\n          \"padding\": \"0px 0px 0px 6px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"1. start \", React.createElement(\"a\", {\n        href: \"https://github.com/ethereum/go-ethereum\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, \"Ethereum server\"), \" or \", React.createElement(\"a\", {\n        href: \"https://github.com/ethereumjs/testrpc\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, \"testrpc server\"), \" running at localhost:8545, then reload this page\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        style: {\n          \"padding\": \"0px 0px 0px 6px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \"2. Install \", React.createElement(\"a\", {\n        href: \"https://metamask.io/\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"Metamask plugin\"), \", connect to network of your choice (including Mainnet!), then reload this page\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }), React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, \"notes\"), \": for localhost testrpc (testnet), you don't need Metamask running, see \", React.createElement(\"a\", {\n        href: \"https://github.com/Tectract/EthDeployer/blob/master/README.md\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, \"the README\"), \" for metamask signing locally & ethereumjs-testrpc notes\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }), React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"notes\"), \": for compilation to succeed while running against localhost:8545 you'll need solc (solidity compiler) installed locally, see instructions \", React.createElement(\"a\", {\n        href: \"https://solidity.readthedocs.io/en/v0.3.3/installing-solidity.html\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"here\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }), React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \"notes\"), \": sometimes you may need to reload once or twice for it to see your web3.eth.accounts[0] account\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }), \"Author: \", React.createElement(\"a\", {\n        href: \"http://www.enledger.io/blog/our-team/\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"Ryan Molecke\"), \", sponsored by \", React.createElement(\"a\", {\n        href: \"http://blockgeeks.com/\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"BlockGeeks.com\"), \"!\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }), \"Issues, comments, suggestions? Please use \", React.createElement(\"a\", {\n        href: \"https://github.com/Tectract/EthDeployer/issues\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, \"this page\"), \" to start an issue ticket, do not email Ryan for help directly :)\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }), \"If you clone this tool and set up your own EthDeployer, please include the \", React.createElement(\"a\", {\n        href: \"https://github.com/Tectract/EthDeployer/blob/master/LICENSE\",\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, \"Mozilla Public License 2.0\"), \" & give me props, thanks! ~Ryan\")))))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Deploy;\n}(Component);\n\nexport default Deploy;","map":{"version":3,"sources":["/Users/chris/Documents/BlockchainProjects/hackathon/auditorFrontEnd/pages/test.js"],"names":["React","Component","Web3","_","web3","alreadyLoaded","compiler","optimize","outterResult","loadWeb3","web3Injected","window","console","log","currentProvider","providers","HttpProvider","Deploy","props","context","state","users","thisUser","thisImage","newFlag","thisNetId","contractText","statusMessage","thisTxHash","thisAddress","RegisterChange","bind","outerThis","eth","debug","accounts","version","getNetwork","err","netId","tempNetId","setState","setTimeout","BrowserSolc","getVersions","soljsonSources","soljsonReleases","compilerVersion","keys","loadVersion","c","result","compile","errors","match","thisMap","sortBy","map","contracts","val","key","bytecode","abi","JSON","parse","interface","myContract","contract","getGasPrice","gasPrice","estimateGas","data","gasEstimate","inflatedGasCost","Math","round","ethCost","warnings","new","from","gas","newContract","address","transactionHash","thisNewStatus","thisLink","e","newState","target","name","value","getInfo","setupCompiler","defaultEthAddressLink","compileAndDeploy","txHashLink","ethAddressLink"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport _ from 'lodash';\n\nvar web3 = {};\nvar alreadyLoaded = false;\nvar compiler;\nvar optimize = 1;\nvar outterResult = \"\"\n\nfunction loadWeb3() {\n   let web3Injected = window.web3;\n   if(typeof web3Injected !== 'undefined'){\n     console.log(\"saw injected web3!\");\n     web3 = new Web3(web3Injected.currentProvider);\n   } else {\n     console.log(\"did not see web3 injected!\");\n     web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n     //console.debug(web3.eth.accounts);\n   }\n}\n\nclass Deploy extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      users: {},\n      thisUser: {},\n      thisImage: {},\n      newFlag: 0,\n      thisNetId: '',\n      contractText: '',\n      statusMessage: 'loading BrowserSolc compiler...',\n      thisTxHash: '',\n      thisAddress: '',\n      compiler: {}\n    };\n    this.RegisterChange = this.RegisterChange.bind(this);\n  }\n\n  getInfo(){\n    var outerThis = this;\n    if(typeof web3.eth !== 'undefined'){\n      console.log(\"saw eth accounts: \");\n      console.debug(web3.eth.accounts);\n      //console.debug(web3.eth)\n      // web3.eth.getCompilers(function(err,resp){\n      //   console.log(\"available compilers: \" + resp);\n      // });\n      web3.version.getNetwork((err, netId) => {\n        var tempNetId = ''\n        if(err) {\n          tempNetId = err;\n          console.log('web3.version.getNetwork() saw err: ' + err);\n        }\n        console.log(\"saw netId:\" + netId);\n        switch (netId) {\n          case \"1\":\n            tempNetId = \"mainnet\";\n            console.log('This is mainnet');\n            break\n          case \"2\":\n            tempNetId = \"Morden  test network\";\n            console.log('This is the deprecated Morden test network.');\n            break\n          case \"3\":\n            tempNetId = \"ropsten test network\";\n            console.log('This is the ropsten test network.');\n            break\n          default:\n            tempNetId = \"localhost\";\n            console.log('This is an unknown/localhost network: ' + tempNetId);\n        }\n        outerThis.setState({\n          thisNetId: tempNetId\n        });\n      });\n    }\n  }\n\n  setupCompiler(){\n    var outerThis = this;\n    setTimeout(function(){\n      // console.debug(window.BrowserSolc);\n      window.BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n        var compilerVersion = soljsonReleases[_.keys(soljsonReleases)[0]];\n        console.log(\"Browser-solc compiler version : \" + compilerVersion);\n        window.BrowserSolc.loadVersion(compilerVersion, function(c) {\n          compiler = c;\n          outerThis.setState({statusMessage:\"ready!\"},function(){\n            console.log(\"Solc Version Loaded: \" + compilerVersion);\n          });\n        });\n      });\n    },1000);\n  }\n\n  compileAndDeploy() {\n    var outerThis = this;\n    console.log(\"compileAndDeploy called!\");\n    this.setState({\n      statusMessage: \"compiling and deploying!\"\n    });\n\n    var result = compiler.compile(this.state.contractText, optimize);\n    if(result.errors && JSON.stringify(result.errors).match(/error/i)){\n      outerThis.setState({\n        statusMessage: JSON.stringify(result.errors)\n      });\n    } else {\n      console.debug(result);\n      // we need to find which of the contracts contains the bytecode for deployment\n      // thisContractSorted = _.sortBy _.map(result.contracts, function(val,key) {\n      //   // ugly mapsort in react\n      //     return [val['abi'],key];\n      //   }\n      // ), (val) ->\n      //   return -1*parseFloat(val[0])  # this grabs the hidden timestampms from above, to sort by\n      var thisMap = _.sortBy(_.map(result.contracts, function(val,key) {\n        // ugly mapsort in react\n          return [key,val];\n        }), function(val) {\n          return -1*parseFloat(val[1].bytecode);\n        });\n\n      console.debug(thisMap);\n\n      var abi = JSON.parse(thisMap[0][1].interface);\n      var bytecode = \"0x\" + thisMap[0][1].bytecode;\n\n      var myContract = web3.eth.contract(abi);\n      console.log(\"bytecode: \" + JSON.stringify(bytecode));\n      console.log(\"abi: \" + JSON.stringify(abi));\n      console.log(\"myContract: \");\n      console.debug(myContract);\n      //console.log(\"myAddress: \" + web3.eth.accounts[0]);\n      web3.eth.getGasPrice((err,gasPrice) => {\n        if(err){\n          console.log(\"deployment web3.eth.getGasPrice error: \" + err);\n          outerThis.setState({\n            statusMessage: \"deployment web3.eth.getGasPrice error: \" + err\n          });\n          return null;\n        } else {\n          console.log(\"current gasPrice (gas / ether): \" + gasPrice);\n          web3.eth.estimateGas({data: bytecode},function(err,gasEstimate){\n            if(err) {\n              console.log(\"deployment web3.eth.estimateGas error: \" + err);\n              outerThis.setState({\n                statusMessage: \"deployment web3.eth.estimateGas error: \" + err\n              });\n              return null;\n            } else {\n              console.log(\"deployment web3.eth.estimateGas amount: \" + gasEstimate);\n              var inflatedGasCost = Math.round(1.2*gasEstimate);\n              var ethCost = gasPrice * inflatedGasCost / 10000000000 / 100000000;\n              var warnings = \"\"\n              if(result.errors){\n                warnings = JSON.stringify(result.errors) + \", \" // show warnings if they exist\n              }\n              outerThis.setState({\n                statusMessage: warnings + \"Compiled! (inflated) estimateGas amount: \" + inflatedGasCost + \" (\" + ethCost+ \" Ether)\"\n              });\n              myContract.new({from:web3.eth.accounts[0],data:bytecode,gas:inflatedGasCost},function(err, newContract){\n                console.log(\"newContract: \" + newContract);\n                if(err) {\n                  console.log(\"deployment err: \" + err);\n                  outerThis.setState({\n                    statusMessage: \"deployment error: \" + err\n                  });\n                  return null;\n                } else {\n                  // NOTE: The callback will fire twice!\n                  // Once the contract has the transactionHash property set and once its deployed on an address.\n                  // e.g. check tx hash on the first call (transaction send)\n                  if(!newContract.address) {\n                    console.log(\"Contract transaction send: TransactionHash: \" + newContract.transactionHash + \" waiting to be mined...\");\n                    outerThis.setState({\n                      statusMessage: \"Please wait a minute.\",\n                      thisTxHash: newContract.transactionHash,\n                      thisAddress: \"waiting to be mined...\"\n                    });\n                  } else {\n                    console.log(\"Contract mined! Address: \" + newContract.address);\n                    console.log(JSON.stringify(newContract));\n                    var thisNewStatus = \"Contract Deployed to \" + outerThis.state.thisNetId;\n                    outerThis.setState({\n                      statusMessage: thisNewStatus,\n                      thisAddress: newContract.address\n                    });\n                    return null;\n                  }\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n    return null;\n  }\n\n  txHashLink(thisTxHash){\n    var thisLink = \"https://etherscan.io/tx/\" + thisTxHash;\n    return <a href={ thisLink } target='_blank'>{ thisTxHash }</a>;\n  }\n\n  ethAddressLink(thisAddress){\n    var thisLink = \"https://etherscan.io/address/\" + thisAddress;\n    return <a href={ thisLink } target=\"_blank\">{ thisAddress }</a>;\n  }\n\n  RegisterChange(e) {\n    //console.log('registering change : ' + e.target.name + \" - \" + e.target.value);\n    // this.setState({\n    //   [e.target.name]: e.target.value,\n    //   \"statusMessage\": \"ready!\"\n    // }\n    var newState = this.state;\n    newState[e.target.name] = e.target.value;\n    newState[\"statusMessage\"] = \"ready!\";\n    this.setState(newState);\n  }\n\n  defaultEthAddressLink() {\n    if(typeof web3.eth !== 'undefined'){\n      if(typeof web3.eth.accounts !== 'undefined') {\n        if(typeof web3.eth.accounts[0] !== 'undefined'){\n          var thisLink = \"https://etherscan.io/address/\" + web3.eth.accounts[0];\n          return <span><a href={ thisLink }target=\"_blank\">{ web3.eth.accounts[0] }</a></span>\n        } else {\n          return <span> web3.eth.accounts[0] was undefined!</span>\n        }\n      } else {\n        return <span> web3.eth.accounts was undefined!</span>\n      }\n    } else {\n      return <span> web3.eth was undefined!</span>\n    }\n  }\n\n  componentDidMount() {\n    if(!alreadyLoaded){ // we only want this to happen once upon page load, not every component reload...\n      alreadyLoaded = true;\n      loadWeb3();\n      this.getInfo();\n      this.setupCompiler();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <table style={{\"minWidth\":\"70%\",\"textAlign\":\"center\",\"margin\":\"auto\"}}>\n            <tbody>\n              <tr>\n              <td style={{\"width\":\"170px\"}}>\n                <a href=\"http://www.enledger.io/\" target=\"_blank\"><img src=\"http://www.enledger.com/EnLedger_glowy_logo_200x200.png\" alt=\"EnLedger-Logo\" width=\"160px\"/></a><br />\n                <a href=\"http://www.enledger.io/\" target=\"_blank\">EnLedger.io</a>\n              </td>\n              <td style={{\"verticalAlign\":\"middle\",\"textAlign\":\"center\",\"fontSize\":\"12px\",\"fontWeight\":\"bold\"}}>\n                &\n              </td>\n              <td style={{\"width\":\"450px\"}}>\n                <a href=\"https://blockgeeks.com/\" target=\"_blank\"><img src=\"Blockgeeks-blue-black-white.png\" alt=\"Blockgeeks-Logo\" height=\"100px\"/></a>\n              </td>\n              <td style={{\"width\":\"20px\",\"verticalAlign\":\"middle\",\"textAlign\":\"center\",\"fontSize\":\"12px\",\"fontWeight\":\"bold\"}}>\n                present\n              </td><td>\n                <h2><span style={{\"color\":\"#84DDFF\"}}><a href=\"https://www.github.com/Tectract\" style={{\"color\":\"#84DDFF\"}} target=\"_blank\">Tectract&#39;s</a></span></h2>\n                <h1><b><a href=\"https://www.github.com/Tectract/EthDeployer\" style={{\"color\":\"#FFFFFF\"}} target=\"_blank\">EthDeployer</a></b></h1>\n              </td></tr>\n            </tbody>\n          </table>\n        </div><br />\n        <div className=\"App-intro\">\n          <div>Saw connection to network: <b>{ this.state.thisNetId }</b>!</div><br />\n          <div>Saw default Eth account to use: <b>{ this.defaultEthAddressLink() }</b>!</div><br />\n\n          <textarea\n                 rows='18' cols='120'\n                 className=\"contractText\"\n                 name='contractText'\n                 ref='contractTextRef'\n                 style={{\"backgroundColor\":\"#E9FEED\",\"whiteSpace\":\"nowrap\",\"resize\":\"none\",\"overflowX\":\"hidden\"}}\n                 value={this.state.contractText}\n                 onChange={this.RegisterChange} />\n          <br /><br />{ this.state.statusMessage }<br /><br />\n          <button color=\"white\" className=\"Button\" onClick={ () => { this.compileAndDeploy() } }>Compile & Deploy</button>\n          <br /><br />\n\n\n          <div>new contract TXID: { this.txHashLink(this.state.thisTxHash) }</div>\n          <div>new contract address: { this.ethAddressLink(this.state.thisAddress) }</div>\n\n          <br />\n          <br />\n          <hr />\n          <span className=\"app-outro\">\n            <table style={{\"minWidth\":\"70%\",\"textAlign\":\"left\",\"margin\":\"auto\"}}>\n              <tbody>\n                <tr><td style={{\"textAlign\":\"center\"}}>\n                  <span style={{\"fontSize\":\"15px\",\"fontWeight\":\"bold\"}}>\n                    Thank you for visiting <a href=\"http://www.enledger.io/\" target=\"_blank\">EnLedger.io</a> and <a href=\"https://www.github.com/Tectract/EthDeployer\" target=\"_blank\">Tectract&#39;s EthDeployer!</a><br /><br />\n                  </span>\n                </td></tr>\n                <tr><td>\n                  <span style={{\"fontSize\":\"13px\",\"fontWeight\":\"bold\"}}>\n                    To use this tool you&#39;ll need a connection to an Ethereum network, via:<br />\n                    <span style={{\"padding\":\"0px 0px 0px 6px\"}}>\n                      1. start <a href=\"https://github.com/ethereum/go-ethereum\" target=\"_blank\">Ethereum server</a> or <a href=\"https://github.com/ethereumjs/testrpc\" target=\"_blank\">testrpc server</a> running at localhost:8545, then reload this page\n                    </span><br /><span style={{\"padding\":\"0px 0px 0px 6px\"}}>\n                      2. Install <a href=\"https://metamask.io/\" target=\"_blank\">Metamask plugin</a>, connect to network of your choice (including Mainnet!), then reload this page\n                    </span><br />\n                    <u>notes</u>: for localhost testrpc (testnet), you don&#39;t need Metamask running, see <a href=\"https://github.com/Tectract/EthDeployer/blob/master/README.md\" target=\"_blank\">the README</a> for metamask signing locally & ethereumjs-testrpc notes<br />\n                    <u>notes</u>: for compilation to succeed while running against localhost:8545 you&#39;ll need solc (solidity compiler) installed locally, see instructions <a href=\"https://solidity.readthedocs.io/en/v0.3.3/installing-solidity.html\" target=\"_blank\">here</a><br />\n                    <u>notes</u>: sometimes you may need to reload once or twice for it to see your web3.eth.accounts[0] account\n                    <br /><br />\n                    Author: <a href=\"http://www.enledger.io/blog/our-team/\" target=\"_blank\">Ryan Molecke</a>, sponsored by <a href=\"http://blockgeeks.com/\" target=\"_blank\">BlockGeeks.com</a>!<br />\n                    Issues, comments, suggestions? Please use <a href=\"https://github.com/Tectract/EthDeployer/issues\" target=\"_blank\">this page</a> to start an issue ticket, do not email Ryan for help directly :)<br />\n                    If you clone this tool and set up your own EthDeployer, please include the <a href=\"https://github.com/Tectract/EthDeployer/blob/master/LICENSE\" target=\"_blank\">Mozilla Public License 2.0</a> & give me props, thanks! ~Ryan\n\n                  </span>\n                </td></tr>\n              </tbody>\n            </table>\n          </span>\n          <br /><br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Deploy;\n"]},"metadata":{},"sourceType":"module"}