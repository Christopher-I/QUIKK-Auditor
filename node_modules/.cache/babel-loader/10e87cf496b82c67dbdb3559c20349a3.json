{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/chris/Documents/BlockchainProjects/hackathon/auditorFrontEnd/pages/components/landingPage.js\";\nimport React from 'react';\nimport { Container, Form, TextArea, Input, Grid, List, Button, Modal } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport Head from 'next/head';\nimport Header from './Header';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\n\nvar landingPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(landingPage, _React$Component);\n\n  function landingPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, landingPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(landingPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentCompiler: '',\n      contractCode: '',\n      creationCost: '',\n      executionCost: '',\n      gasEstimate: '',\n      timeOfAudit: '',\n      fileSize: '',\n      vunerabiltiesFound: '',\n      noOfLines: '',\n      percent: '',\n      errorMessage: '',\n      successMessage: '',\n      renderedList: \"\",\n      loading: false //get Time of Audit\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTimeOfAudit\", function () {\n      var today = new Date();\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      var dateTime = date + ' ' + time;\n\n      _this.setState({\n        timeOfAudit: dateTime\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectCompiler\", function (compiler) {\n      _this.setState({\n        currentCompiler: compiler\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"storeContractCodeToState\", function (contractCode) {\n      _this.setState({\n        contractCode: contractCode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeErrorMessage\", function () {\n      _this.setState({\n        contractCode: '',\n        warningsList: '',\n        creationCost: '',\n        executionCost: '',\n        gasEstimate: '',\n        timeOfAudit: '',\n        fileSize: '',\n        vunerabiltiesFound: '',\n        noOfLines: '',\n        percent: '',\n        errorMessage: '',\n        successMessage: '',\n        renderedList: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderWarningList\", function (warnings) {\n      //update loading bar\n      _this.setState({\n        percent: '75',\n        warningsList: warnings.length\n      });\n\n      var list = warnings.map(function (warnings) {\n        return React.createElement(List.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(List.Header, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, \"line \", warnings.key), React.createElement(List.Description, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, warnings.value)));\n      }); //update loading bar\n\n      _this.setState({\n        percent: '100',\n        renderedList: list\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"auditCode\", function (dataArray) {\n      return Auditor(dataArray);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function () {\n      //check if compiler is selected by user else notify user\n      if (_this.state.currentCompiler) {\n        _this.setTimeOfAudit();\n\n        var self = _assertThisInitialized(_this); //notify user of progress\n\n\n        _this.setState({\n          loading: true,\n          errorMessage: '',\n          successMessage: ''\n        }); //store contract code to state and prepare for compile and audit\n\n\n        var source = _this.state.contractCode; //split code into array based on each new line\n\n        var dataArray = source.split(\"\\n\");\n        var dataArrayLength = dataArray.length; //update loading bar\n\n        self.setState({\n          percent: '25'\n        }); //printlist of available compilers\n        // BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n        //   //console.log(soljsonSources);\n        //   //console.log(soljsonReleases);\n        // });\n        //Load a chosen compiler version\n\n        BrowserSolc.loadVersion.bind(_assertThisInitialized(_this))(_this.state.currentCompiler, function (compiler) {\n          var optimize = 1;\n          var result = compiler.compile(source, optimize); // console.log(result);\n          // console.log(result.sources[\"\"]);\n          //console.log(result.contracts);\n          //check for errrors in compilation\n\n          if (result.errors && !result.sources[\"\"]) {\n            //save all warning and errors to state\n            self.setState({\n              errorMessage: result.errors[0]\n            });\n          } else {\n            //check for warnings in compilation\n            if (result.errors) {\n              //save all warning and errors to state\n              self.setState({\n                errorMessage: result.errors[0]\n              });\n            } //compilation was succesful, auditing and updating general stats begins at this point \n            //compute total gas cost which is the estimated creation cost plus the execution cost\n            //let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n\n            self.setState({\n              noOfLines: dataArrayLength,\n              // creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n              // executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n              // gasEstimate : totalGasCost,\n              percent: 50,\n              successMessage: \"Audit Complete!\"\n            }); //send contract code to auditor and await feed back of array of warnings\n\n            var warnings = self.auditCode(dataArray); //send array of warnings to renderList function to create organized JSX and update state\n\n            self.renderWarningList(warnings);\n          }\n        });\n      } else {\n        _this.setState({\n          errorMessage: \"Please select a compiler\"\n        });\n      }\n\n      _this.setState({\n        loading: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(landingPage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(Container, {\n        style: {\n          width: '1300px',\n          marginTop: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(LandingPageSection1, {\n        removeErrorMessage: this.removeErrorMessage,\n        loading: this.state.loading,\n        successMessage: this.state.successMessage,\n        errorMessage: this.state.errorMessage,\n        percent: this.state.percent,\n        storeContractCodeToState: this.storeContractCodeToState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(LandingPageSection2, {\n        warningsList: this.state.warningsList,\n        renderedList: this.state.renderedList,\n        gasEstimate: this.state.gasEstimate,\n        removeErrorMessage: this.removeErrorMessage,\n        loading: this.state.loading,\n        noOfLines: this.state.noOfLines,\n        timeOfAudit: this.state.timeOfAudit,\n        onSubmit: this.onSubmit,\n        selectCompiler: this.selectCompiler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      })))), React.createElement(\"h4\", {\n        style: {\n          marginLeft: '380px',\n          color: 'gray'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Suggestions and Contributions are welcome ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647\"));\n    }\n  }]);\n\n  return landingPage;\n}(React.Component);\n\nexport default landingPage;","map":{"version":3,"sources":["/Users/chris/Documents/BlockchainProjects/hackathon/auditorFrontEnd/pages/components/landingPage.js"],"names":["React","Container","Form","TextArea","Input","Grid","List","Button","Modal","Auditor","Head","Header","LandingPageSection1","LandingPageSection2","landingPage","currentCompiler","contractCode","creationCost","executionCost","gasEstimate","timeOfAudit","fileSize","vunerabiltiesFound","noOfLines","percent","errorMessage","successMessage","renderedList","loading","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","setState","compiler","warningsList","warnings","length","list","map","key","value","dataArray","state","setTimeOfAudit","self","source","split","dataArrayLength","BrowserSolc","loadVersion","bind","optimize","result","compile","errors","sources","auditCode","renderWarningList","width","marginTop","removeErrorMessage","storeContractCodeToState","onSubmit","selectCompiler","marginLeft","color","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Form, TextArea,Input, Grid,List,Button,Modal } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport Head from 'next/head';\nimport Header from './Header';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\n\n\nclass landingPage extends React.Component{\n\n\tstate = {\n\t\tcurrentCompiler:'',\n\t\tcontractCode:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\tloading:false\n\t}\n\n\t//get Time of Audit\n\tsetTimeOfAudit=()=>{\n\n\t\tlet today = new Date();\n\t\tlet date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\t\tlet time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\t\tlet dateTime = date+' '+time;\n\n\t\tthis.setState({\n\t\t\ttimeOfAudit: dateTime\n\t\t})\n\t}\n\n\t//receive compiler version from child component-landingPageSection1 and store it to state\n\tselectCompiler =(compiler)=>{\n\t\tthis.setState({\n\t\t\tcurrentCompiler:compiler\n\t\t})\n\t}\n\n\t//receive contract code from child component-landingPageSection2 and store it to state\n\tstoreContractCodeToState=(contractCode)=>{\n\t\tthis.setState({\n\t\t\tcontractCode: contractCode\n\t\t})\n\t}\n\n\tremoveErrorMessage=()=>{\n\t\tthis.setState({\n\t\tcontractCode:'',\n\t\twarningsList:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\t})\n\t}\n\n\n\trenderWarningList=(warnings)=>{\n\n\t\t //update loading bar\n      \tthis.setState({\n\t\t  \t\tpercent: '75',\n\t\t  \t\twarningsList:warnings.length\n\t\t  \t})\n\n\tlet list = warnings.map(warnings => {        \n            return (\n                <List.Item>\n                          <List.Content>\n                            <List.Header as='a'>line {warnings.key}</List.Header>\n                            <List.Description as='a'>{warnings.value}</List.Description>\n                          </List.Content>\n                    </List.Item>\n            );   \n        });\n\n\t     //update loading bar\n        this.setState({\n\t\t  \t\tpercent: '100',\n\t\t  \t\trenderedList:list\n\t\t  \t})\n\n\t}\n\n\n\tauditCode=(dataArray)=>{\n        return Auditor(dataArray);\n\n    }\n\n\t//Compile contract and run audit\n\tonSubmit =()=>{\n\t\t//check if compiler is selected by user else notify user\n\t\tif(this.state.currentCompiler){\n\t\tthis.setTimeOfAudit();\n\t\tlet self = this;\n\n\n\t\t//notify user of progress\n\t\tthis.setState({\n\t\t  \t\tloading: true,\n\t\t  \t\terrorMessage:'',\n\t\t  \t\tsuccessMessage:''\n\t\t  \t})\n\n\t\t//store contract code to state and prepare for compile and audit\n\t\tlet source = this.state.contractCode;\n\t\t//split code into array based on each new line\n        let dataArray = source.split(\"\\n\");\n        let dataArrayLength = dataArray.length;\n\n        //update loading bar\n        self.setState({\n\t\t  \t\tpercent: '25'\n\t\t  \t})\n\t\t\n\t\t//printlist of available compilers\n\t\t// BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n\t\t//   //console.log(soljsonSources);\n\t\t//   //console.log(soljsonReleases);\n\t\t// });\n\n\t\t//Load a chosen compiler version\n\t\tBrowserSolc.loadVersion.bind(this)(this.state.currentCompiler, function(compiler){\n\t\t\n\t\t  let optimize = 1;\n\t\t  let result = compiler.compile(source, optimize);\n\t\t  // console.log(result);\n\t\t  // console.log(result.sources[\"\"]);\n\t\t  //console.log(result.contracts);\n\n\n\n\n\n\n\t\t  //check for errrors in compilation\n\t\t  if(result.errors && !result.sources[\"\"]){\n\n\t\t  \t\t\t  //save all warning and errors to state\n\t\t  self.setState({\n\t\t  \t\terrorMessage: result.errors[0]\n\t\t  \t})\n\n\n\n\t\t  }else{\n\t\t  \t//check for warnings in compilation\n\t\t  if(result.errors){\n\n\t\t  \t\t\t  //save all warning and errors to state\n\t\t  self.setState({\n\t\t  \t\terrorMessage: result.errors[0]\n\t\t  \t})\n\t\t   }\n\n\n\n\t\t  \t//compilation was succesful, auditing and updating general stats begins at this point \n\n\t\t  \t//compute total gas cost which is the estimated creation cost plus the execution cost\n\t\t  //let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n\t\t  \tself.setState({\n\t\t  \t\tnoOfLines:dataArrayLength,\n\t\t  \t\t// creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n\t\t  \t\t// executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n\t\t  \t\t// gasEstimate : totalGasCost,\n\t\t  \t\tpercent: 50,\n\t\t  \t\tsuccessMessage:\"Audit Complete!\"\n\t\t  \t})\n\t\t  \t//send contract code to auditor and await feed back of array of warnings\n\t\t  \tlet warnings = self.auditCode(dataArray);\n\n\t\t  \t//send array of warnings to renderList function to create organized JSX and update state\n\t\t  \tself.renderWarningList(warnings);\n\n\t\t  }\n\t\n\t\t});\n\n\t}else{\n\t\tthis.setState({\n\t\t\terrorMessage:\"Please select a compiler\"\n\t\t})\n\n\t}\n\n\t\tthis.setState({\n\t\t  \t\tloading: false\n\t\t  \t})  \n\t}\n\n\n\trender(){\n\n\t\treturn(\n\t\t\t<div >\n\n\t\t\t<Container style={{width:'1300px', marginTop:'10px'}}>\n\t\t\t  <Header/>\n\t\t\t\t<Grid>\n\t\t\t\t    <Grid.Row>\n\n\t\t\t\t\t      <Grid.Column width={11}>\n\t\t\t\t\t      <LandingPageSection1\n\t\t\t\t\t      \n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      successMessage = {this.state.successMessage}\n\t\t\t\t\t      errorMessage = {this.state.errorMessage}\n\t\t\t\t\t      percent = {this.state.percent}\n\t\t\t\t\t      storeContractCodeToState = {this.storeContractCodeToState}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\n\t\t\t\t\t      <Grid.Column width={4}>\n\t\t\t\t\t      <LandingPageSection2 \n\t\t\t\t\t      warningsList = {this.state.warningsList}\n\t\t\t\t\t      renderedList = {this.state.renderedList}\n\t\t\t\t\t      gasEstimate = {this.state.gasEstimate}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      noOfLines = {this.state.noOfLines}\n\t\t\t\t\t      timeOfAudit = {this.state.timeOfAudit}\n\t\t\t\t\t      onSubmit ={this.onSubmit}\n\t\t\t\t\t      selectCompiler = {this.selectCompiler}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t\t      <Grid.Column width={1}>\n\t\t\t\t\t      \n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t    </Grid.Row>\n\t\t\t    </Grid>\n\n\t\t  </Container>\n\t\t<h4 style={{marginLeft:'380px',color:'gray'}}>Suggestions and Contributions are welcome ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647</h4>\n\t\t  </div>\n\t\t  )\n\n\t}\n}\n\nexport default landingPage;"]},"metadata":{},"sourceType":"module"}